(in-package :cl-user)
(defpackage cl-radar.test-wavegen
  (:use :cl :clunit))
(in-package :cl-radar.test-wavegen)

(cl-syntax:use-syntax :annot)

(defsuite WavegenSuite (CL-RADAR.TEST-MAIN::MAINSUITE))

(deftest test-sines-fill-2ch-array (WavegenSuite)
  (setf cl-radar.wavegen::*phase* 0.0)
  (assert-true
      (cl-radar.math:float-multidim-array-mostly-equal-p
       (cl-radar.wavegen:sines-fill-2ch-array (make-array '(2 10) :initial-element 0.0))
       #2A((0.0 0.0065447977 0.013088474 0.019629909 0.026167978 0.032701563
                0.03922955 0.045750808 0.052264232 0.058768697)
           (0.0 6.544798e-4 0.0013088475 0.001962991 0.0026167978 0.0032701564
                0.003922955 0.0045750807 0.0052264235 0.00587687)))))


(deftest test-signals-fill-2ch-array (WavegenSuite)
  (setf cl-radar.wavegen::*phase* 0.0)
  (assert-true
      (cl-radar.math:float-multidim-array-mostly-equal-p
       (cl-radar.wavegen:signals-fill-2ch-array
        (make-array '(2 10) :initial-element 0.0)
        :left-sig-next-fn (lambda () (cl-radar.wavegen:ramp-get-next 48000 4800)))
       #2A((-0.25 -0.17337579 -0.09675158 -0.020127371 0.05649684 0.13312104
                  0.20974526 0.28636947 0.3629937 0.4396179)
           (0.0065447977 0.019629909 0.032701563 0.045750808 0.058768697 0.07174631
                         0.08467475 0.09754516 0.11034872 0.12307665))))

  (setf cl-radar.wavegen::*phase* 0.0)
  (assert-true
      (cl-radar.math:float-multidim-array-mostly-equal-p
       (cl-radar.wavegen:signals-fill-2ch-array
        (make-array '(2 10) :initial-element 0.0)
        :left-sig-next-fn (lambda () (cl-radar.wavegen:ramp-get-next 48000 4800))
        :right-sig-next-fn (lambda () (cl-radar.wavegen:sines-get-next 48000 4800))
        :left-ampl 0.7
        :right-ampl 2.1)
       #2A((-0.175 -0.12136305 -0.067726105 -0.014089159 0.039547786 0.09318473
                0.14682168 0.20045863 0.25409558 0.30773252)
        (0.6171745 0.9986093 5.9488156e-16 -0.9986093 -0.6171745 0.6171745
                   0.9986093 -3.3445854e-15 -0.9986093 -0.6171745))))

  (setf cl-radar.wavegen::*phase* 0.0)
  (assert-true
      (cl-radar.math:float-multidim-array-mostly-equal-p
       (cl-radar.wavegen:signals-fill-2ch-array (make-array '(2 24) :initial-element 0.0) :left-sig-next-fn (lambda () (cl-radar.wavegen:ramp-get-next 48000 4800)) :right-sig-next-fn (lambda () (cl-radar.wavegen:sines-get-next 48000 4800)) :left-ampl 0.7 :right-ampl 2.1)
       #2A((-0.175 -0.12136305 -0.067726105 -0.014089159 0.039547786 0.09318473
                   0.14682168 0.20045863 0.25409558 0.30773252 0.36136946 -0.14818153
                   -0.094544575 -0.040907633 0.012729314 0.06636626 0.12000321 0.17364015
                   0.2272771 0.28091404 0.33455098 0.38818794 -0.14818153 -0.094544575)
           (0.6171745 0.9986093 5.9488156e-16 -0.9986093 -0.6171745 0.6171745
                      0.9986093 -3.3445854e-15 -0.9986093 -0.6171745 0.0 0.9986093 0.6171745
                      -0.6171745 -0.9986093 6.7541147e-16 0.9986093 0.6171745 -0.6171745
                      -0.9986093 5.0811724e-15 0.0 0.9986093 0.6171745))))



  (setf cl-radar.wavegen::*phase* 0.0)
  (assert-true
      (cl-radar.math:float-multidim-array-mostly-equal-p
       (cl-radar.wavegen:signals-fill-2ch-array (make-array '(2 24) :initial-element 0.0) :left-sig-next-fn (lambda () (cl-radar.wavegen:ramp-get-next 48000 4800)) :right-sig-next-fn (lambda () (cl-radar.wavegen:sines-get-next 48000 4800)))
       #2A((-0.25 -0.17337579 -0.09675158 -0.020127371 0.05649684 0.13312104
                  0.20974526 0.28636947 0.3629937 0.4396179 0.5162421 -0.2116879 -0.13506368
                  -0.058439475 0.018184735 0.09480894 0.17143315 0.24805737 0.32468158
                  0.4013058 0.47792998 0.5545542 -0.2116879 -0.13506368)
           (0.29389262 0.47552827 2.8327693e-16 -0.47552827 -0.29389262 0.29389262
                       0.47552827 -1.5926599e-15 -0.47552827 -0.29389262 0.0 0.47552827
                       0.29389262 -0.29389262 -0.47552827 3.2162452e-16 0.47552827 0.29389262
                       -0.29389262 -0.47552827 2.419606e-15 0.0 0.47552827 0.29389262))))

  (setf cl-radar.wavegen::*phase* 0.0)
  (assert-true
      (cl-radar.math:float-multidim-array-mostly-equal-p
       (cl-radar.wavegen:signals-fill-2ch-array
        (make-array '(2 24) :initial-element 0.0)
        :left-sig-next-fn #'cl-radar.wavegen:sines-get-next
        :right-sig-next-fn #'cl-radar.wavegen:ramp-get-next)
       #2A((0.0 0.013088474 0.026167978 0.03922955 0.052264232 0.06526309 0.07821723
                0.09111776 0.10395584 0.11672268 0.12940952 0.14200768 0.1545085
                0.16690344 0.17918397 0.19134171 0.20336832 0.21525554 0.22699524
                0.23857938 0.25 0.26124927 0.27231953 0.28320313)
           (-0.24920183 -0.24760549 -0.24600916 -0.24441282 -0.24281648 -0.24122015
                        -0.2396238 -0.23802747 -0.23643112 -0.23483479 -0.23323846 -0.23164211
                        -0.23004578 -0.22844943 -0.2268531 -0.22525677 -0.22366042 -0.2220641
                        -0.22046775 -0.21887141 -0.21727507 -0.21567874 -0.2140824 -0.21248606))))

  (setf cl-radar.wavegen::*phase* 0.0)
  (assert-true
      (cl-radar.math:float-multidim-array-mostly-equal-p
       (cl-radar.wavegen:signals-fill-2ch-array
        (make-array '(2 24) :initial-element 0.0)
        :left-sig-next-fn #'cl-radar.wavegen:sines-get-next
        :right-sig-next-fn #'cl-radar.wavegen:ramp-get-next)
       #2A((0.0 0.013088474 0.026167978 0.03922955 0.052264232 0.06526309 0.07821723
                0.09111776 0.10395584 0.11672268 0.12940952 0.14200768 0.1545085
                0.16690344 0.17918397 0.19134171 0.20336832 0.21525554 0.22699524
                0.23857938 0.25 0.26124927 0.27231953 0.28320313)
           (-0.24920183 -0.24760549 -0.24600916 -0.24441282 -0.24281648 -0.24122015
                        -0.2396238 -0.23802747 -0.23643112 -0.23483479 -0.23323846 -0.23164211
                        -0.23004578 -0.22844943 -0.2268531 -0.22525677 -0.22366042 -0.2220641
                        -0.22046775 -0.21887141 -0.21727507 -0.21567874 -0.2140824 -0.21248606)))))

(deftest test-generate-fmcw-if-samples (WavegenSuite)
  (assert-true
      (cl-radar.math::complex-multidim-array-mostly-equal-p
       (cl-radar.wavegen:generate-fmcw-if-samples
        '((10 0 1.0) (20 -15 0.5))
        :center-frequency 2d10 :bandwidth 2d8
        :sample-frequency 192d3 :sweep-time 0.0001
        :element-spacing 0.02 :num-elements 3
        :noise-std 0.0)
       #2a((#C(1.5d0 0.0d0) #C(-0.7241701474620754d0 -0.6215257690499263d0)
              #C(-0.6772221707187346d0 0.1469573694176709d0)
              #C(1.1040254667384846d0 0.9448565005146553d0)
              #C(-0.28063390037677705d0 -1.1646233720149766d0)
              #C(-0.5126061995316042d0 0.002034100493891494d0)
              #C(0.21982879058635746d0 1.298643199944638d0)
              #C(0.5915718300587315d0 -1.248320947656916d0)
              #C(-0.5638303856967173d0 -0.024930424045779054d0)
              #C(-0.5255092006562883d0 0.9734704311935649d0)
              #C(1.350322937070487d0 -0.6130881338209191d0)
              #C(-0.7360917223537066d0 -0.30039243539396804d0)
              #C(-0.7491035883345348d0 0.39862724348797224d0)
              #C(1.4331039236785106d0 0.41682873853160557d0)
              #C(-0.615590638503847d0 -0.8588754210871876d0)
              #C(-0.6002116204199814d0 0.05216294954902084d0)
              #C(0.7759334012972156d0 1.176101239520594d0)
              #C(0.03869313992830731d0 -1.2792915274233219d0)
              #C(-0.501370514446174d0 -7.18763505764275d-5))
           (#C(0.7181215245537164d0 -0.41297036828334166d0)
              #C(0.1413052897806683d0 -0.8027183267772385d0)
              #C(-1.2277840905035144d0 0.8388822554632455d0)
              #C(1.0861661609648243d0 0.06079795005345051d0)
              #C(0.29742326585823753d0 -0.4954982805629897d0)
              #C(-1.3846932583805343d0 -0.14405709443074458d0)
              #C(0.9843909239475439d0 0.8544324170087962d0)
              #C(0.2865793008375549d0 -0.4183462296289781d0)
              #C(-0.8588420862083566d0 -0.8585049989984439d0)
              #C(0.23366780326218548d0 1.4268232211570269d0)
              #C(0.47654571114636013d0 -0.4774716344463129d0)
              #C(-0.1500473344746675d0 -0.962533244347598d0)
              #C(-0.7775694327582103d0 1.2824078560539711d0)
              #C(0.8908840504677273d0 -0.28165253146893454d0)
              #C(0.247648361891522d0 -0.6673110620777694d0)
              #C(-1.386989042071848d0 0.4557218228563985d0)
              #C(1.12397547665889d0 0.36323889617812016d0)
              #C(0.2896433150792444d0 -0.43141035353278584d0)
              #C(-1.2357622609512635d0 -0.4925627271401962d0))
           (#C(0.8178218996796847d0 0.4656298312647946d0)
              #C(-0.49626681838140996d0 -1.4154011830251074d0)
              #C(-0.34591203129878845d0 0.9035363090121136d0)
              #C(0.36605449839683923d0 0.5739428310372288d0)
              #C(0.5241971912690908d0 -1.350163163543468d0)
              #C(-1.013710786312956d0 0.6585950599081762d0)
              #C(0.18647192562703113d0 0.47337632197097274d0)
              #C(1.1440308890960162d0 -0.634344491750052d0)
              #C(-1.381010387869945d0 -0.14490935706518665d0)
              #C(0.18011902761233808d0 0.5442072208076782d0)
              #C(1.0811548871767716d0 0.16776182695049974d0)
              #C(-1.0273229991310768d0 -1.073284694215943d0)
              #C(-0.03157120499522226d0 0.8076814931660858d0)
              #C(0.6196601382801123d0 0.5599626210229418d0)
              #C(-0.08078781708275831d0 -1.4882910568322454d0)
              #C(-0.6101220887427523d0 0.8780442260881706d0)
              #C(0.25638821488306235d0 0.5340335642758461d0)
              #C(0.8484680107943715d0 -1.1166792313502354d0)
              #C(-1.2285120652344148d0 0.39164647328035945d0))))))

(deftest test-relative-primes (WavegenSuite)
  (assert-equal
      (cl-radar.wavegen:all-relative-primes 32)
      '(1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31))

  (assert-equal
      (cl-radar.wavegen:all-relative-primes 42)
      '(1 5 11 13 17 19 23 25 29 31 37 41))

  (assert-equal
      (cl-radar.wavegen:first-relative-prime 14)
      3))

(deftest test-zadoff-chu (WavegenSuite)
  (assert-true
      (cl-radar.math::complex-array-mostly-equal-p
       (cl-radar.wavegen::zadoff-chu-sequence 16 :root 3)
       #(#C(1.0d0 -0.0d0)
         #C(0.38268343236508984d0 -0.9238795325112867d0)
         #C(-0.9238795325112868d0 0.38268343236508967d0)
         #C(0.7071067811865477d0 -0.7071067811865472d0)
         #C(0.7071067811865466d0 0.7071067811865485d0)
         #C(0.3826834323650863d0 0.9238795325112882d0)
         #C(0.9238795325112868d0 0.38268343236508945d0)
         #C(-4.904777002955296d-16 -1.0d0)
         #C(-3.4296300182491773d-15 1.0d0)
         #C(-0.9238795325112851d0 -0.3826834323650938d0)
         #C(-0.3826834323650813d0 -0.9238795325112903d0)
         #C(-0.7071067811865497d0 -0.7071067811865454d0)
         #C(-0.7071067811865495d0 0.7071067811865456d0)
         #C(0.9238795325112916d0 -0.3826834323650781d0)
         #C(-0.38268343236508806d0 0.9238795325112874d0)
         #C(-1.0d0 -1.9581969173625882d-15))))

  (assert-true
      (cl-radar.math::complex-array-mostly-equal-p
       (cl-radar.wavegen::zadoff-chu-sequence 16 :root 3 :offset 1.0)
       #(#C(0.38268343236508984d0 -0.9238795325112867d0)
         #C(-0.9238795325112868d0 0.38268343236508967d0)
         #C(0.7071067811865477d0 -0.7071067811865472d0)
         #C(0.7071067811865466d0 0.7071067811865485d0)
         #C(0.3826834323650863d0 0.9238795325112882d0)
         #C(0.9238795325112868d0 0.38268343236508945d0)
         #C(-4.904777002955296d-16 -1.0d0)
         #C(-3.4296300182491773d-15 1.0d0)
         #C(-0.9238795325112851d0 -0.3826834323650938d0)
         #C(-0.3826834323650813d0 -0.9238795325112903d0)
         #C(-0.7071067811865497d0 -0.7071067811865454d0)
         #C(-0.7071067811865495d0 0.7071067811865456d0)
         #C(0.9238795325112916d0 -0.3826834323650781d0)
         #C(-0.38268343236508806d0 0.9238795325112874d0)
         #C(-1.0d0 -1.9581969173625882d-15)
         #C(-1.0d0 -9.798412354452001d-15))))

  (assert-true
      (cl-radar.math::complex-array-mostly-equal-p
       (cl-radar.wavegen::zadoff-chu-sequence 16 :root 3 :offset 1.5)
       #(#C(-0.5956993044924332d0 -0.8032075314806449d0)
         #C(0.42755509343028136d0 0.9039892931234437d0)
         #C(-0.989176509964781d0 -0.1467304744553616d0)
         #C(-0.4275550934302802d0 -0.9039892931234442d0)
         #C(-0.5956993044924338d0 -0.8032075314806445d0)
         #C(-0.9039892931234437d0 0.4275550934302813d0)
         #C(0.9891765099647806d0 0.14673047445536447d0)
         #C(-0.903989293123444d0 0.4275550934302807d0)
         #C(-0.5956993044924298d0 -0.8032075314806475d0)
         #C(-0.42755509343028464d0 -0.9039892931234421d0)
         #C(-0.9891765099647798d0 -0.1467304744553698d0)
         #C(0.42755509343027404d0 0.9039892931234471d0)
         #C(-0.5956993044924224d0 -0.803207531480653d0)
         #C(0.903989293123447d0 -0.4275550934302745d0)
         #C(0.9891765099647778d0 0.1467304744553829d0)
         #C(0.9039892931234415d0 -0.42755509343028597d0)))))
